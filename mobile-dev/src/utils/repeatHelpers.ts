import * as Notifications from 'expo-notifications';
import { ActivityRecordCreate, ActivityRecord } from '../types';
import { extensionModalService } from '../services/extensionModalService';
import i18n from '../i18n';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 */
export function getRepeatDates(baseDate: Date, repeat: 'daily' | 'weekly' | 'monthly'): Date[] {
  const countMap = { daily: 7, weekly: 4, monthly: 3 };
  const count = countMap[repeat];
  const result: Date[] = [];

  for (let i = 1; i <= count; i++) {
    const date = new Date(baseDate);
    if (repeat === 'daily') {
      date.setDate(date.getDate() + i);
    } else if (repeat === 'weekly') {
      date.setDate(date.getDate() + i * 7);
    } else if (repeat === 'monthly') {
      date.setMonth(date.getMonth() + i);
    }
    result.push(date);
  }

  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π
 */
export function createRepeatActivity(
  baseActivity: ActivityRecordCreate,
  newDate: Date
): ActivityRecordCreate {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const formatLocalDateTime = (date: Date): string => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  };

  const newDateTimeString = formatLocalDateTime(newDate);

  return {
    ...baseActivity,
    date: newDateTimeString,
    time: newDateTimeString,
    // –£–±–∏—Ä–∞–µ–º repeat –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    repeat: undefined,
  };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
 */
export function getExtensionReminderDays(repeat: 'daily' | 'weekly' | 'monthly'): number {
  switch (repeat) {
    case 'daily':
      return 7;
    case 'weekly':
      return 28; // 4 –Ω–µ–¥–µ–ª–∏
    case 'monthly':
      return 90; // 3 –º–µ—Å—è—Ü–∞
    default:
      return 7;
  }
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export async function scheduleExtensionReminder(
  activity: ActivityRecord,
  repeat: 'daily' | 'weekly' | 'monthly'
): Promise<string | null> {
  try {
    console.log(`üìÖ Scheduling extension reminder for activity ${activity.id} (${repeat})`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ—Ä–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    const activityDate = new Date(activity.date);
    const lastActivityDate = new Date(activityDate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∫ –¥–∞—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const reminderDays = getExtensionReminderDays(repeat);
    lastActivityDate.setDate(lastActivityDate.getDate() + reminderDays);
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –°–õ–ï–î–£–Æ–©–ò–ô –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–∏–∏
    const reminderDate = new Date(lastActivityDate);
    reminderDate.setDate(reminderDate.getDate() + 1);
    reminderDate.setHours(10, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 10:00 —É—Ç—Ä–∞
    
    console.log(`üìÖ Extension reminder calculation:`);
    console.log(`  - Activity date: ${activityDate.toLocaleDateString()}`);
    console.log(`  - Last activity in series: ${lastActivityDate.toLocaleDateString()}`);
    console.log(`  - Reminder scheduled for: ${reminderDate.toLocaleString()}`);
    console.log(`  - Days in series: ${reminderDays}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    if (reminderDate <= new Date()) {
      console.warn('‚ö†Ô∏è Reminder date is in the past, skipping');
      return null;
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: i18n.t('activity.notifications.extension_reminder_title'),
        body: i18n.t('activity.notifications.extension_reminder_body', {
          repeatType: repeat,
          petName: 'your pet'
        }),
        sound: 'default',
        data: {
          type: 'repeat-extension',
          activityId: activity.id,
          originalRepeat: repeat,
          petId: activity.pet_id,
          category: activity.category,
        },
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.DATE,
        date: reminderDate,
      },
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
    try {
      await extensionModalService.scheduleExtensionModal({
        activityId: activity.id,
        activityTitle: activity.title,
        originalRepeat: repeat,
        petId: activity.pet_id,
        category: activity.category,
        scheduledDate: reminderDate.toISOString(),
        createdAt: new Date().toISOString(),
      });
      console.log(`üìã Scheduled extension modal for activity ${activity.id}`);
    } catch (modalError) {
      console.error('‚ùå Failed to schedule extension modal:', modalError);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–æ–¥–∞–ª–∫–∏
    }

    console.log(`‚úÖ Extension reminder scheduled: ${notificationId}`);
    console.log(`   Will fire on: ${reminderDate.toLocaleString()}`);
    return notificationId;
  } catch (error) {
    console.error('‚ùå Failed to schedule extension reminder:', error);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 */
export function createRepeatTitle(baseTitle: string, index: number, repeat: string): string {
  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  return baseTitle;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 */
export function shouldCreateRepeats(repeat: string | undefined | null): boolean {
  return repeat !== undefined && repeat !== null && repeat !== 'none';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getRepeatDescription(repeat: 'daily' | 'weekly' | 'monthly'): string {
  switch (repeat) {
    case 'daily':
      return i18n.t('activity.notifications.repeat_descriptions.daily');
    case 'weekly':
      return i18n.t('activity.notifications.repeat_descriptions.weekly');
    case 'monthly':
      return i18n.t('activity.notifications.repeat_descriptions.monthly');
    default:
      return '';
  }
} 