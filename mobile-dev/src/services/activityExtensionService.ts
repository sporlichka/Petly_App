import { ActivityRecord, ActivityRecordCreate } from '../types';
import { apiService } from './api';
import { notificationService } from './notificationService';
import { 
  createActivityWithRepeats, 
  RepeatActivityResult 
} from './repeatActivityService';
import { 
  getRepeatDates, 
  createRepeatActivity,
  scheduleExtensionReminder
} from '../utils/repeatHelpers';
import { ExtensionModalData, extensionModalService } from './extensionModalService';
import i18n from '../i18n';

export interface ActivityExtensionResult {
  success: boolean;
  originalActivity: ActivityRecord | null;
  newActivities: ActivityRecord[];
  notificationIds: string[];
  extensionReminderId?: string;
  error?: string;
}

export class ActivityExtensionService {
  private static instance: ActivityExtensionService;

  public static getInstance(): ActivityExtensionService {
    if (!ActivityExtensionService.instance) {
      ActivityExtensionService.instance = new ActivityExtensionService();
    }
    return ActivityExtensionService.instance;
  }

  /**
   * –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
   */
  async extendActivity(data: ExtensionModalData): Promise<ActivityExtensionResult> {
    const result: ActivityExtensionResult = {
      success: false,
      originalActivity: null,
      newActivities: [],
      notificationIds: [],
    };

    try {
      console.log(`üîÑ Extending activity ${data.activityId} (${data.originalRepeat})`);

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      try {
        const originalActivity = await this.getActivityById(data.activityId);
        result.originalActivity = originalActivity;
        console.log(`‚úÖ Found original activity: ${originalActivity.title}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Original activity ${data.activityId} not found, proceeding with stored data`);
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞
      const isPetAccessible = await this.validatePetAccess(data.petId);
      if (!isPetAccessible) {
        throw new Error(`Pet with ID ${data.petId} not found or access denied. Please check if the pet still exists in your account.`);
      }

      // 3. –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
      const extensionStartDate = new Date(data.scheduledDate);
      console.log(`üìÖ Extension start date: ${extensionStartDate.toLocaleDateString()}`);

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
      const newDates = this.generateExtensionDates(extensionStartDate, data.originalRepeat);
      console.log(`üìÖ Generated ${newDates.length} new dates for extension:`);
      newDates.forEach((date, index) => {
        console.log(`  ${index + 1}. ${date.toLocaleDateString()}`);
      });

      // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const newActivities: ActivityRecord[] = [];
      const notificationIds: string[] = [];

      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const petName = await this.getPetName(data.petId);

      for (const date of newDates) {
        try {
          const newActivity = await this.createExtensionActivity(data, date);
          newActivities.push(newActivity);

          // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          const notificationId = await this.scheduleNotificationForActivity(newActivity, petName);
          if (notificationId) {
            notificationIds.push(notificationId);
          }

          console.log(`‚úÖ Created extension activity for ${date.toLocaleDateString()}`);
        } catch (error) {
          console.error(`‚ùå Failed to create extension activity for ${date.toLocaleDateString()}:`, error);
        }
      }

      result.newActivities = newActivities;
      result.notificationIds = notificationIds;

      // 6. –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
      if (newActivities.length > 0) {
        try {
          const lastActivity = newActivities[newActivities.length - 1];
          const extensionReminderId = await scheduleExtensionReminder(lastActivity, data.originalRepeat);
          
          if (extensionReminderId) {
            result.extensionReminderId = extensionReminderId;
            console.log(`üì≤ Scheduled next extension reminder and modal`);
          }
        } catch (error) {
          console.error('‚ùå Failed to schedule next extension reminder:', error);
        }
      }

      result.success = newActivities.length > 0;
      
      console.log(`üéâ Extension complete: ${newActivities.length} activities created, ${notificationIds.length} notifications scheduled`);
      
      return result;

    } catch (error) {
      console.error('‚ùå Failed to extend activity:', error);
      result.error = error instanceof Error ? error.message : 'Unknown error';
      return result;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ID
   */
  private async getActivityById(activityId: number): Promise<ActivityRecord> {
    // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏,
    // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    const allActivities = await apiService.getAllUserActivityRecords();
    const activity = allActivities.find(a => a.id === activityId);
    
    if (!activity) {
      throw new Error(`Activity ${activityId} not found`);
    }
    
    return activity;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param scheduledDate –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–∏–∏)
   * @param repeat –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (daily/weekly/monthly)
   * @returns –ú–∞—Å—Å–∏–≤ –¥–∞—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   */
  private generateExtensionDates(scheduledDate: Date, repeat: 'daily' | 'weekly' | 'monthly'): Date[] {
    // scheduledDate —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    // –î–ª—è daily: —Å–æ–∑–¥–∞–µ–º 7 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–π –¥–∞—Ç—ã
    // –î–ª—è weekly: —Å–æ–∑–¥–∞–µ–º 4 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–π –¥–∞—Ç—ã  
    // –î–ª—è monthly: —Å–æ–∑–¥–∞–µ–º 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–π –¥–∞—Ç—ã
    const startDate = new Date(scheduledDate);
    
    console.log(`üìÖ Extension will start from: ${startDate.toLocaleDateString()}`);
    
    return getRepeatDates(startDate, repeat);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
   */
  private async createExtensionActivity(
    data: ExtensionModalData, 
    date: Date
  ): Promise<ActivityRecord> {
    const activityData: ActivityRecordCreate = {
      pet_id: data.petId,
      category: data.category as any,
      title: data.activityTitle,
      date: this.formatLocalDateTime(date),
      time: this.formatLocalDateTime(date),
      repeat: undefined, // –ü—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å–∞–º–∏
      notify: true, // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏–π
      notes: i18n.t('activity.notifications.extension_reminder_body', { 
        repeatType: data.originalRepeat,
        petName: 'your pet'
      }),
    };

    return await apiService.createActivityRecord(activityData);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
   */
  private formatLocalDateTime(date: Date): string {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private async scheduleNotificationForActivity(
    activity: ActivityRecord, 
    petName: string
  ): Promise<string | null> {
    try {
      if (!activity.notify) {
        return null;
      }

      const notificationId = await notificationService.scheduleActivityNotification(activity, petName);
      return notificationId;
    } catch (error) {
      console.error(`Failed to schedule notification for activity ${activity.id}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
   */
  private async getPetName(petId: number): Promise<string> {
    try {
      const pets = await apiService.getPets();
      const pet = pets.find(p => p.id === petId);
      
      if (!pet) {
        console.warn(`‚ö†Ô∏è Pet with ID ${petId} not found, using default name`);
        return 'your pet';
      }
      
      console.log(`üêæ Found pet: ${pet.name} (ID: ${petId})`);
      return pet.name;
    } catch (error) {
      console.error('Failed to get pet name:', error);
      return 'your pet';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async validatePetAccess(petId: number): Promise<boolean> {
    try {
      const pets = await apiService.getPets();
      const pet = pets.find(p => p.id === petId);
      return !!pet;
    } catch (error) {
      console.error(`Failed to validate pet access for ID ${petId}:`, error);
      return false;
    }
  }


}

// Export singleton instance
export const activityExtensionService = ActivityExtensionService.getInstance(); 