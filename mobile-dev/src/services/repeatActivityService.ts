import { ActivityRecordCreate, ActivityRecord } from '../types';
import { apiService } from './api';
import { notificationService } from './notificationService';
import { extensionModalService } from './extensionModalService';
import { 
  getRepeatDates, 
  createRepeatActivity, 
  shouldCreateRepeats,
  scheduleExtensionReminder,
  getRepeatDescription
} from '../utils/repeatHelpers';
import dayjs from 'dayjs';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID
 */
async function getPetName(petId: number): Promise<string> {
  try {
    const pets = await apiService.getPets();
    const pet = pets.find(p => p.id === petId);
    return pet?.name || 'your pet';
  } catch (error) {
    console.error('Failed to get pet name:', error);
    return 'your pet';
  }
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 */
async function scheduleNotificationForActivity(activity: ActivityRecord, petName: string): Promise<string | null> {
  try {
    console.log(`üîî RepeatService: Scheduling notification for activity ${activity.id}`);
    console.log(`  - Activity notify: ${activity.notify}`);
    console.log(`  - Pet name: ${petName}`);
    
    if (!activity.notify) {
      console.log(`‚ùå RepeatService: Notifications disabled for activity ${activity.id}, skipping`);
      return null;
    }

    console.log(`üìû RepeatService: Calling enhanced notificationService.scheduleActivityNotification...`);
    const notificationId = await notificationService.scheduleActivityNotification(activity, petName);
    console.log(`üìû RepeatService: Notification service returned: ${notificationId}`);
    
    if (notificationId) {
      console.log(`‚úÖ RepeatService: Scheduled notification ${notificationId} for activity ${activity.id}`);
      return notificationId;
    } else {
      console.log(`‚ùå RepeatService: Failed to schedule notification for activity ${activity.id} - service returned null`);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå RepeatService: Error scheduling notification for activity ${activity.id}:`, error);
    return null;
  }
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 */
async function scheduleMonthlyNotifications(
  activity: ActivityRecord, 
  petName: string,
  startDate: Date
): Promise<string[]> {
  const notificationIds: string[] = [];
  try {
    console.log(`üìÖ Scheduling notifications for activity ${activity.id}`);
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await notificationService.cancelAllNotificationsForActivity(activity.id);

    if (!activity.repeat || activity.repeat === 'none') {
      // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notificationId = await scheduleNotificationForActivity(activity, petName);
      if (notificationId) {
        notificationIds.push(notificationId);
      }
      return notificationIds;
    }

    // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—ã–µ –¥–∞—Ç—ã
    const repeatType = activity.repeat as 'daily' | 'weekly' | 'monthly';
    const repeatDates = getRepeatDates(startDate, repeatType);
    let notificationCount = 0;
    for (const date of repeatDates) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
      const localDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—Å—Ç–æ toISOString()
      const formatLocalDateTime = (date: Date): string => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
      };
      
      const tempActivity: ActivityRecord = {
        ...activity,
        date: formatLocalDateTime(localDate),
        time: formatLocalDateTime(localDate),
      };
      const notificationId = await scheduleNotificationForActivity(tempActivity, petName);
      if (notificationId) {
        notificationIds.push(notificationId);
        notificationCount++;
      }
    }
    console.log(`‚úÖ Scheduled ${notificationIds.length} notifications for activity ${activity.id}`);
    return notificationIds;
  } catch (error) {
    console.error(`‚ùå Failed to schedule notifications for activity ${activity.id}:`, error);
    return notificationIds;
  }
}

export interface RepeatActivityResult {
  success: boolean;
  mainActivity: ActivityRecord;
  repeatActivities: ActivityRecord[];
  extensionReminderId?: string;
  notificationIds: string[];
  errors: string[];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function createActivityWithRepeats(
  activityData: ActivityRecordCreate
): Promise<RepeatActivityResult> {
  const result: RepeatActivityResult = {
    success: false,
    mainActivity: {} as ActivityRecord,
    repeatActivities: [],
    notificationIds: [],
    errors: [],
  };

  try {
    console.log('üîÑ Creating activity with enhanced repeats:', activityData);

    // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const mainActivity = await apiService.createActivityRecord(activityData);
    result.mainActivity = mainActivity;
    
    console.log('‚úÖ Main activity created:', mainActivity.id);

    // 2. –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log(`üîî Planning notifications for main activity ${mainActivity.id}`);
    try {
      const petName = await getPetName(mainActivity.pet_id);
      console.log(`üêæ Pet name: ${petName}`);

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
      const mainNotificationIds = await scheduleMonthlyNotifications(mainActivity, petName, new Date(mainActivity.date));
      result.notificationIds.push(...mainNotificationIds);
      
      console.log(`‚úÖ Main activity notifications scheduled: ${mainNotificationIds.length} notifications`);
    } catch (error) {
      console.error('‚ùå Failed to schedule main activity notifications:', error);
      result.errors.push(`Failed to schedule main activity notifications: ${error}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if (!shouldCreateRepeats(activityData.repeat)) {
      console.log('üìÖ No repeats needed, activity creation complete');
      console.log(`üîî Final notification summary: ${result.notificationIds.length} notifications scheduled`);
      result.success = true;
      return result;
    }

    const repeat = activityData.repeat as 'daily' | 'weekly' | 'monthly';
    console.log(`üîÑ Creating repeats for: ${repeat}`);

    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    const baseDate = new Date(activityData.date);
    const repeatDates = getRepeatDates(baseDate, repeat);
    
    console.log(`üìÖ Generated ${repeatDates.length} repeat dates:`, 
      repeatDates.map(d => d.toLocaleDateString())
    );

    // 5. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const repeatPromises = repeatDates.map(async (date, index) => {
      try {
        const repeatActivity = createRepeatActivity(activityData, date);
        console.log(`üìù Creating repeat activity ${index + 1}/${repeatDates.length} for ${date.toLocaleDateString()}`);
        return await apiService.createActivityRecord(repeatActivity);
      } catch (error) {
        console.error(`‚ùå Failed to create repeat activity ${index + 1}:`, error);
        result.errors.push(`Failed to create repeat ${index + 1}: ${error}`);
        return null;
      }
    });

    // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const repeatResults = await Promise.allSettled(repeatPromises);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    repeatResults.forEach((res, index) => {
      if (res.status === 'fulfilled' && res.value) {
        result.repeatActivities.push(res.value);
        console.log(`‚úÖ Repeat activity ${index + 1} created:`, res.value.id);
      } else {
        console.error(`‚ùå Repeat activity ${index + 1} failed:`, res.status === 'rejected' ? res.reason : 'Unknown error');
        result.errors.push(`Repeat activity ${index + 1} failed to create`);
      }
    });

    // 6. –ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ scheduleMonthlyNotifications
    console.log(`üîî Skipping notification scheduling for ${result.repeatActivities.length} repeat activities (already handled by main activity)`);
    
    console.log(`‚úÖ Total notifications scheduled: ${result.notificationIds.length}`);

    // 7. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
    try {
      const extensionReminderId = await scheduleExtensionReminder(mainActivity, repeat);
      if (extensionReminderId) {
        result.extensionReminderId = extensionReminderId;
        console.log(`üì≤ Extension reminder scheduled:`, extensionReminderId);
      }
    } catch (error) {
      console.error('‚ùå Failed to schedule extension reminder:', error);
      result.errors.push(`Failed to schedule extension reminder: ${error}`);
    }

    // 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    const totalExpected = repeatDates.length;
    const totalCreated = result.repeatActivities.length;
    
    result.success = totalCreated >= totalExpected * 0.5; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–æ —Ö–æ—Ç—è –±—ã 50%
    
    console.log(`üéâ Enhanced repeat creation complete: ${totalCreated}/${totalExpected} activities created`);
    console.log(`üîî Final notification summary: ${result.notificationIds.length} notifications scheduled`);
    
    if (result.errors.length > 0) {
      console.warn('‚ö†Ô∏è Some errors occurred:', result.errors);
    }

    return result;

  } catch (error) {
    console.error('‚ùå Failed to create activity with enhanced repeats:', error);
    result.errors.push(`Main error: ${error}`);
    result.success = false;
    return result;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
 */
export async function updateActivityWithRepeats(
  activityId: number,
  activityUpdate: Partial<ActivityRecordCreate>,
  originalActivity: ActivityRecord
): Promise<RepeatActivityResult> {
  const result: RepeatActivityResult = {
    success: false,
    mainActivity: {} as ActivityRecord,
    repeatActivities: [],
    notificationIds: [],
    errors: [],
  };

  try {
    console.log('üîÑ Updating activity with enhanced repeats:', activityId);

    // 1. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await notificationService.cancelAllNotificationsForActivity(activityId);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const updatedActivity = await apiService.updateActivityRecord(activityId, activityUpdate);
    result.mainActivity = updatedActivity;
    
    console.log('‚úÖ Main activity updated:', updatedActivity.id);

    // 3. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    try {
      const petName = await getPetName(updatedActivity.pet_id);
      const notificationIds = await scheduleMonthlyNotifications(updatedActivity, petName, new Date(updatedActivity.date));
      result.notificationIds.push(...notificationIds);
      console.log(`‚úÖ Rescheduled ${notificationIds.length} notifications for updated activity`);
    } catch (error) {
      console.error('‚ùå Failed to reschedule notifications for updated activity:', error);
      result.errors.push(`Failed to reschedule notifications: ${error}`);
    }

    // 4. –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activityUpdate.repeat !== undefined || activityUpdate.date || activityUpdate.time) {
      console.log('üîÑ Repeat parameters changed, recreating repeat activities...');
      
      // TODO: –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      // –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (shouldCreateRepeats(updatedActivity.repeat)) {
        const repeat = updatedActivity.repeat as 'daily' | 'weekly' | 'monthly';
        const baseDate = new Date(updatedActivity.date);
        const repeatDates = getRepeatDates(baseDate, repeat);
        
        const activityData: ActivityRecordCreate = {
          pet_id: updatedActivity.pet_id,
          category: updatedActivity.category,
          title: updatedActivity.title,
          date: updatedActivity.date,
          time: updatedActivity.time,
          repeat: updatedActivity.repeat,
          notify: updatedActivity.notify,
          notes: updatedActivity.notes,
          food_type: updatedActivity.food_type,
          quantity: updatedActivity.quantity,
          duration: updatedActivity.duration,
        };

        const repeatPromises = repeatDates.map(async (date, index) => {
          try {
            const repeatActivity = createRepeatActivity(activityData, date);
            return await apiService.createActivityRecord(repeatActivity);
          } catch (error) {
            console.error(`‚ùå Failed to create updated repeat activity ${index + 1}:`, error);
            result.errors.push(`Failed to create updated repeat ${index + 1}: ${error}`);
            return null;
          }
        });

        const repeatResults = await Promise.allSettled(repeatPromises);
        
        repeatResults.forEach((res, index) => {
          if (res.status === 'fulfilled' && res.value) {
            result.repeatActivities.push(res.value);
          }
        });

        // –ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - –æ–Ω–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        console.log(`üîî Skipping notification scheduling for ${result.repeatActivities.length} updated repeat activities (already handled by main activity)`);
      }
    }

    result.success = true;
    return result;

  } catch (error) {
    console.error('‚ùå Failed to update activity with enhanced repeats:', error);
    result.errors.push(`Update error: ${error}`);
    result.success = false;
    return result;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
 */
export async function cleanupExtensionModalsForActivity(activityId: number): Promise<void> {
  try {
    console.log(`üßπ Cleaning up extension modals for activity ${activityId}`);
    await extensionModalService.removeAllModalsForActivity(activityId);
    console.log(`‚úÖ Extension modals cleaned up for activity ${activityId}`);
  } catch (error) {
    console.error(`‚ùå Failed to cleanup extension modals for activity ${activityId}:`, error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
 */
export function getRepeatSummary(
  repeat: string | undefined | null
): { willCreateRepeats: boolean; description: string; count: number } {
  if (!shouldCreateRepeats(repeat)) {
    return {
      willCreateRepeats: false,
      description: '–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å',
      count: 1,
    };
  }

  const repeatType = repeat as 'daily' | 'weekly' | 'monthly';
  const countMap = { daily: 7, weekly: 4, monthly: 3 };
  const count = countMap[repeatType] + 1; // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
  
  return {
    willCreateRepeats: true,
    description: `–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π: –æ—Å–Ω–æ–≤–Ω–∞—è + ${count - 1} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (${getRepeatDescription(repeatType)})`,
    count,
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function checkAndScheduleMissedNotifications(): Promise<void> {
  try {
    console.log('üîç Checking for missed notifications in repeat service...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allActivities = await apiService.getAllUserActivityRecords();
    const now = new Date();
    
    for (const activity of allActivities) {
      if (activity.notify) {
        const activityDate = new Date(activity.date);
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        if (activityDate < now) {
          console.log(`‚ö†Ô∏è Found past activity ${activity.id} with notifications enabled`);
          
          // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          if (activity.repeat && activity.repeat !== 'none') {
            const petName = await getPetName(activity.pet_id);
            const nextDate = dayjs(now).add(1, 'day').toDate(); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            const formatLocalDateTime = (date: Date): string => {
              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, '0');
              const day = String(date.getDate()).padStart(2, '0');
              const hours = String(date.getHours()).padStart(2, '0');
              const minutes = String(date.getMinutes()).padStart(2, '0');
              const seconds = String(date.getSeconds()).padStart(2, '0');
              return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
            };
            
            const tempActivity: ActivityRecord = {
              ...activity,
              date: formatLocalDateTime(nextDate),
              time: formatLocalDateTime(nextDate),
            };
            
            await scheduleMonthlyNotifications(tempActivity, petName, nextDate);
            console.log(`‚úÖ Rescheduled notifications for past repeating activity ${activity.id}`);
          }
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Failed to check and schedule missed notifications:', error);
  }
} 