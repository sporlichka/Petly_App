"""initial

Revision ID: 2349928d828f
Revises: 
Create Date: 2025-07-04 05:37:09.568536

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2349928d828f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TYPE IF EXISTS petgender;")
    op.execute("DROP TYPE IF EXISTS activitycategory;")
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('fcm_token', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_fcm_token'), 'users', ['fcm_token'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('pets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('species', sa.String(), nullable=False),
    sa.Column('breed', sa.String(), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='petgender'), nullable=False),
    sa.Column('birthdate', sa.Date(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pets_id'), 'pets', ['id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token_hash', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_valid', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token_hash'), 'refresh_tokens', ['token_hash'], unique=False)
    op.create_table('activity_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.Enum('FEEDING', 'HEALTH', 'ACTIVITY', name='activitycategory'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('repeat', sa.String(), nullable=True),
    sa.Column('notify', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('food_type', sa.String(), nullable=True),
    sa.Column('quantity', sa.String(), nullable=True),
    sa.Column('duration', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activity_records_id'), 'activity_records', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_states',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', name=op.f('app_states_pkey'))
    )
    op.create_table('user_states',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', 'user_id', name=op.f('user_states_pkey'))
    )
    op.create_table('events',
    sa.Column('id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('invocation_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('branch', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actions', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('long_running_tool_ids_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('grounding_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('partial', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('turn_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('interrupted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['app_name', 'user_id', 'session_id'], ['sessions.app_name', 'sessions.user_id', 'sessions.id'], name=op.f('events_app_name_user_id_session_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'app_name', 'user_id', 'session_id', name=op.f('events_pkey'))
    )
    op.create_table('sessions',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('create_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', 'user_id', 'id', name=op.f('sessions_pkey'))
    )
    op.drop_index(op.f('ix_activity_records_id'), table_name='activity_records')
    op.drop_table('activity_records')
    op.drop_index(op.f('ix_refresh_tokens_token_hash'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_pets_id'), table_name='pets')
    op.drop_table('pets')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_fcm_token'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
