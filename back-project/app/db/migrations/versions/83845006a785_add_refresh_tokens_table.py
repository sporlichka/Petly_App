"""add refresh tokens table

Revision ID: 83845006a785
Revises: 44e487a79d69
Create Date: 2025-07-02 10:48:07.920646

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '83845006a785'
down_revision: Union[str, Sequence[str], None] = '44e487a79d69'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token_hash', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_valid', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token_hash'), 'refresh_tokens', ['token_hash'], unique=False)
    op.drop_table('user_states')
    op.drop_table('events')
    op.drop_table('sessions')
    op.drop_table('app_states')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_states',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', name=op.f('app_states_pkey'))
    )
    op.create_table('sessions',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('create_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', 'user_id', 'id', name='sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('events',
    sa.Column('id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('invocation_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('branch', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actions', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('long_running_tool_ids_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('grounding_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('partial', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('turn_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('interrupted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['app_name', 'user_id', 'session_id'], ['sessions.app_name', 'sessions.user_id', 'sessions.id'], name=op.f('events_app_name_user_id_session_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'app_name', 'user_id', 'session_id', name=op.f('events_pkey'))
    )
    op.create_table('user_states',
    sa.Column('app_name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('app_name', 'user_id', name=op.f('user_states_pkey'))
    )
    op.drop_index(op.f('ix_refresh_tokens_token_hash'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    # ### end Alembic commands ###
